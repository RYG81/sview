/**
 * iZ3D frontScreen fragment shader.
 * Copyright © 2007-2009 iZ3D LLC
 * Copyright © 2007-2010 Kirill Gavrilov <kirill@sview.ru>
 *
 * StOutIZ3D library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * StOutIZ3D library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 * If not, see <http://www.gnu.org/licenses/>.
 */

uniform sampler2D texL, texR, textT;
varying vec2 fTexCoord;

// returns coordinates in table-texture for input colors
vec2 color2Table(in float cX, in float cY) {
    return vec2((cX * (255.0 / 512.0) + 1.0 / 1024.0), (cY * (255.0 / 256.0) + 1.0 / 512.0));
}

// compute back color
vec4 getBackColor(in vec4 cL, in vec4 cR) {
   vec2 tCoordR = color2Table(cL.r, cR.r);
   vec2 tCoordG = color2Table(cL.g, cR.g);
   vec2 tCoordB = color2Table(cL.b, cR.b);
   vec4 cB;
   cB.r = texture2D(textT, tCoordR).r;
   cB.g = texture2D(textT, tCoordG).g;
   cB.b = texture2D(textT, tCoordB).b;
   cB.a = cL.a;
   return cB;
}

void main(void) {
    vec4 cL = texture2D(texL, fTexCoord);
    vec4 cR = texture2D(texR, fTexCoord);
    vec4 backColor = getBackColor(cL, cR);
    gl_FragColor = backColor;
}
